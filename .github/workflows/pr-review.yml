name: OpenAI PR Reviewer

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai requests

      - name: Review PR with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<EOF
          import openai
          import os
          import requests

          # Configuration
          openai.api_key = os.getenv("OPENAI_API_KEY")
          repo_name = os.getenv("GITHUB_REPOSITORY")
          pr_number = os.getenv("GITHUB_REF").split('/')[-2]
          token = os.getenv("GITHUB_TOKEN")

          # Fetch PR diff
          headers = {
              "Authorization": f"token {token}",
              "Accept": "application/vnd.github.v3.diff"
          }
          diff_url = f"https://api.github.com/repos/{repo_name}/pulls/{pr_number}"
          response = requests.get(diff_url, headers=headers)

          if response.status_code != 200:
              raise Exception(f"Failed to fetch PR diff: {response.status_code} - {response.text}")

          pr_diff = response.text

          # Send PR diff to OpenAI
          response = openai.ChatCompletion.create(
              model="gpt-4",
              messages=[
                  {"role": "system", "content": "You are a code reviewer. Provide helpful feedback on the following code changes:"},
                  {"role": "user", "content": pr_diff}
              ]
          )

          # Extract content
          review_comment = response['choices'][0]['message']['content']

          # Post a comment on the PR
          comment_url = f"https://api.github.com/repos/{repo_name}/issues/{pr_number}/comments"
          requests.post(comment_url, headers=headers, json={"body": review_comment})
          EOF
